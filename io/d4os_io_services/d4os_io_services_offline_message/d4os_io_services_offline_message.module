<?php
/**
* @package    d4os
* @copyright  Copyright (C) 2010 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
* @license    GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
* D4os is free software. This version may have been modified pursuant
* to the GNU General Public License, and as distributed it includes or
* is derivative of works licensed under the GNU General Public License or
* other free or open source software licenses.
*/

global $d4os_io_services_offline_message_log_level;
$d4os_io_services_offline_message_log_level = variable_get('d4os_io_services_offline_message_log_level', 0);

/**
 * Implementation of hook_help().
 */
function d4os_io_services_offline_message_help($path, $arg) {
  switch ($path) {
    case 'admin/help#services_offline_message':
      return '<p>'. t('Provides offline_message methods to services applications. Requires services.module.') .'</p>';
    case 'admin/modules#description':
      return t('Provides offline_message methods to services applications. Requires services.module.');
  }
}

function d4os_io_services_offline_message_menu() {
  $items['admin/settings/d4os/io/services/offline_message'] = array(
    'title'             => 'offline_message',
    'description'       => 'd4os io services offline_message settings',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('d4os_io_services_offline_message_admin'),
    'access arguments'  => array('admin d4os io services offline_message'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'd4os_io_services_offline_message.admin.inc'
  );
  $items['grid/offline-message/%'] = array(
    'title'             => 'offline_message',
    'description'       => 'd4os io services offline_message',
    'page callback'     => 'd4os_io_services_offline_message_query',
    'page arguments'    => array(2),
    'access callback'   => TRUE,
    'type'              => MENU_CALLBACK,
  );
  return $items;
}

function d4os_io_services_offline_message_perm() {
  return array(
    'admin d4os io services offline_message',
  );
}

function d4os_io_services_offline_message_query($action) {
  $raw_data = file_get_contents("php://input");
  $xml = simplexml_load_string($raw_data);
  if ($xml->dialog == 42) return;
  $params = array(
    'xml' => $xml,
    'raw' => $raw_data,
  );

  switch($action) {
    case 'SaveMessage':
      d4os_io_services_offline_message_savemessage($params);
      break;
    case 'RetrieveMessages':
      d4os_io_services_offline_message_retrievemessages($params);
      break;
  }
}

function d4os_io_services_offline_message_savemessage($params) {
  global $d4os_io_services_offline_message_log_level;

  // manage params
  $params['toAgentID'] = (string)$params['xml']->toAgentID;
  $params['message'] = substr($params['raw'], (strpos($params['raw'], "?>") + 2));
  
  // log
  if ($d4os_io_services_offline_message_log_level > 6) {
    $log = array();
    $log[] = array(
      'name' => 'function call',
      'type' => 'string',
      'data' => 'savemessage',
    );
    $log[] = array(
      'name' => 'input params',
      'type' => 'array',
      'data' => $params,
    );
    d4os_log('d4os_io_srv_omsg', $log, WATCHDOG_DEBUG);
  }

  // do the job
  $output = module_invoke_all('os_services_offline_message_savemessage', $params);
  $return = d4os_oi_services_offline_message_build_answer('savemessage', $output);

  if ($d4os_io_services_offline_message_log_level > 6) {
    $log = array();
    $log[] = array(
      'name' => 'function output',
      'type' => 'string',
      'data' => 'savemessage',
    );
    $log[] = array(
      'name' => 'output xml',
      'type' => 'string',
      'data' => htmlentities($return),
    );
    d4os_log('d4os_io_srv_omsg', $log, WATCHDOG_DEBUG);
  }
  print $return;
}

function d4os_io_services_offline_message_retrievemessages($params) {
  global $d4os_io_services_offline_message_log_level;

  // manage params
  $params['Guid'] = (string)$params['xml']->Guid;

  // log
  if ($d4os_io_services_offline_message_log_level > 6) {
    $log = array();
    $log[] = array(
      'name' => 'function call',
      'type' => 'string',
      'data' => 'retrievemessages',
    );
    $log[] = array(
      'name' => 'input params',
      'type' => 'array',
      'data' => $params,
    );
    d4os_log('d4os_io_srv_omsg', $log, WATCHDOG_DEBUG);
  }

  // do the job
  $output = module_invoke_all('os_services_offline_message_retrievemessages', $params);
  $return = d4os_oi_services_offline_message_build_answer('retrievemessages', $output);

  if ($d4os_io_services_offline_message_log_level > 6) {
    $log = array();
    $log[] = array(
      'name' => 'function output',
      'type' => 'string',
      'data' => 'retrievemessages',
    );
    $log[] = array(
      'name' => 'output xml',
      'type' => 'string',
      'data' => htmlentities($return),
    );
    d4os_log('d4os_io_srv_omsg', $log, WATCHDOG_DEBUG);
  }
  print $return;
}

function d4os_oi_services_offline_message_build_answer($action, $params) {
  $output = '<?xml version="1.0" encoding="utf-8"?>';
  switch($action) {
    case 'savemessage':
      $output .= $params['success'] ? '<boolean>true</boolean>' : '<boolean>false</boolean>';
      break;
    case 'retrievemessages':
      $output .= '<ArrayOfGridInstantMessage xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema">';
      foreach ($params['data'] as $message) {
        $output .= $message;
      }
      $output .= '</ArrayOfGridInstantMessage>';
      break;
  }
  return $output;
}