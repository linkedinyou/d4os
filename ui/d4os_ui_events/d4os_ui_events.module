<?php
/**
* @package    d4os
* @copyright  Copyright (C) 2010 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
* @license    GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
* D4os is free software. This version may have been modified pursuant
* to the GNU General Public License, and as distributed it includes or
* is derivative of works licensed under the GNU General Public License or
* other free or open source software licenses.
*/

module_load_include('helpers.inc', 'd4os_ui_events');

function d4os_ui_events_node_info() {
  return array(
    'grid_event' => array(
      'name'        => t('Event'),
      'module'      => 'd4os_ui_events',
      'description' => t("This is a node to manage inworld events."),
      'has_title'   => TRUE,
      'title_label' => t('Name'),
      'has_body'    => TRUE,
      'body_label'  => t('Description'),
    )
  );
}

function d4os_ui_events_menu() {
  $items = array();
  $items['events'] = array(
    'title'             => 'Events',
    'description'       => 'Events list',
    'page callback'     => 'd4os_ui_events_list',
    'access arguments'  => array('view events list'),
    'type'              => MENU_SUGGESTED_ITEM,
  );
  return $items;
}

function d4os_ui_events_access($op, $node, $account) {
  if ($op == 'create') {
    return user_access('create d4os events content', $account);
  }

  if ($op == 'update') {
    if (user_access('edit any d4os events content', $account) || (user_access('edit own d4os events content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }

  if ($op == 'delete') {
    if (user_access('delete any d4os events content', $account) || (user_access('delete own d4os events content', $account) && ($account->uid == $node->uid))) {
      return TRUE;
    }
  }
}

function d4os_ui_events_perm() {
  return array(
    'create d4os events content',
    'delete own d4os events content',
    'delete any d4os events content',
    'edit own d4os events content',
    'edit any d4os events content',
    'view events list',
  );
}

function d4os_ui_events_form(&$node) {

  if ($node->nid) {
    d4os_ui_events_build_node(&$node);
  }
  $type = node_get_types('type', $node);

  // what
  $form['what'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('What'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
    '#weight'       => -11
  );
  // title
  $form['what']['title'] = array(
    '#type'           => 'textfield',
    '#title'          => check_plain($type->title_label),
    '#required'       => TRUE,
    '#default_value'  => $node->title,
  );
  // categories
  $form['what']['category'] = array(
    '#type'           => 'select',
    '#title'          => t('Category'),
    '#default_value'  => isset($node->category) ? $node->category : 27,
    '#options'        => d4os_ui_events_get_categories(),
    '#required'       => TRUE,
  );
  // maturity
  $form['what']['mature'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Mature ?'),
    '#default_value'  => isset($node->mature) ? $node->mature : 0,
    '#description'    => t('Select if this event will have mature content.'),
    '#required'       => TRUE,
  );
  // body
  $form['what']['body_field'] = node_body_field($node, $type->body_label, $type->min_word_count);
  // when
  $form['when'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('When'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
    '#weight'       => -10
  );
  // date
  $format = variable_get('date_format_medium', 'm/d/Y H:i');
  $now = date('Y-m-d H:i:s');
  $form['when']['start_date'] = array(
     '#type'                => 'date_select',
     '#title'               => t('Start date'),
     '#default_value'       => isset($node->start_date) ? $node->start_date : $now,
     '#date_format'         => $format,
     '#date_label_position' => 'within',
     '#date_increment'      => 15,
     '#date_year_range'     => '0:+2',
     '#required'            => TRUE,
  );
  $form['when']['end_date'] = array(
     '#type'                => 'date_select',
     '#title'               => t('End date'),
     '#default_value'       => isset($node->end_date) ? $node->end_date : $now,
     '#date_format'         => $format,
     '#date_label_position' => 'within',
     '#date_increment'      => 15,
     '#date_year_range'     => '0:+2',
     '#required'            => TRUE,
  );
  // where
  $form['where'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Where'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
    '#weight'       => -9
  );
  // location
  $form['where']['location'] = array(
    '#type'           => 'select',
    '#title'          => t('Location'),
    '#options'        => d4os_ui_events_build_parcels_list($node->uid),
    '#default_value'  => isset($node->location) ? $node->location : 0,
    '#description'    => t('Select a location for the event.'),
    '#required'       => TRUE,
  );
  // cover charge
  $form['cover_charge'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Cover charge'),
    '#collapsible'  => TRUE,
    '#collapsed'    => TRUE,
    '#weight'         => -6
  );
  $form['cover_charge']['covercharge'] = array(
    '#type'           => 'checkbox',
    '#title'          => t('Enable cover charge'),
    '#default_value'  => isset($node->covercharge) ? $node->covercharge : 0,
    '#description'    => t('Enable cover charge for this event ?'),
    '#required'       => TRUE,
  );
  $form['cover_charge']['coveramount'] = array(
    '#type'           => 'textfield',
    '#size'           => 5,
    '#maxlength'      => 5,
    '#title'          => t('Cover charge amount'),
    '#default_value'  => isset($node->coveramount) ? $node->coveramount : 0,
    '#description'    => t('Cover charge amount.'),
  );
  $form['eventid'] = array('#type' => 'hidden', '#value' => isset($node->eventid) ? $node->eventid : NULL,);

  return $form;
}

function d4os_ui_events_nodeapi(&$node, $op, $teaser, $page) {
  if ($node->type == 'grid_event') {
    switch ($op) {
  
      case 'validate':
        if ($node->d4os_ui_events_location == 'none') {
          form_set_error('d4os_ui_events_location', t('You must select a location.'));
        }
        break;
  
      case 'insert':
      case 'update':
        module_invoke_all('os_event_save', d4os_ui_events_build_output($node));
        break;
  
      case 'delete':
        module_invoke_all('os_event_delete', $node->nid);
        break;
  
      case 'prepare':
        // check if the "search" datastore is alive
        $alive = module_invoke_all('os_search_is_alive');
        if (!is_array($alive) || $alive['success'] !== TRUE) {
          drupal_set_message(t('You can not create an event.'), 'error');
          drupal_set_message(t('Please try again later.'), 'error');
          drupal_goto();
        }
        // get the user
        $account = user_load($node->uid);
        // check if the user's got some parcels
        $parcels = module_invoke_all('os_events_get_parcels_by_owner', $account->d4os['grid']['account']['uuid']);
        if ($parcels[0] === FALSE) {
          drupal_set_message(t('You need to be a parcel owner to create an event'), 'error');
          drupal_goto('node/add');
        }
        break;
    }
  }
}

function d4os_ui_events_load($node) {
  // check if the "search" datastore is alive
  $alive = module_invoke_all('os_search_is_alive');
  if (!is_array($alive) || $alive['success'] !== TRUE) {
    drupal_set_message(t('You can not view events.'), 'error');
    drupal_set_message(t('Please try again later.'), 'error');
    drupal_goto();
  }
  $additions = module_invoke_all('os_event_load',  $node->nid);
  return $additions[0];
}

function d4os_ui_events_view($node, $teaser = FALSE, $page = FALSE) {
  $node = node_prepare($node, $teaser);
  //drupal_set_message('<pre>'.print_r($node, true).'</pre>', 'warning');
  $node->content['event'] = array(
    '#value' => theme('d4os_ui_events_event', $node),
    '#weight' => 1,
  );
  
  return $node;
}

function d4os_ui_events_list() {
  // check if the "search" datastore is alive
  $alive = module_invoke_all('os_search_is_alive');
  if (!is_array($alive) || $alive['success'] !== TRUE) {
    drupal_set_message(t('You can not view events.'), 'error');
    drupal_set_message(t('Please try again later.'), 'error');
    drupal_goto();
  }
  // get time
  $now = date('Y-m-d H:i:s');
  $utc = d4os_ui_events_get_utc_timestamp_from_date($now);
  // get the events
  $events = module_invoke_all('os_event_load_all', $utc, 'dateUTC');
  // get the nodes
  $nodes = array();
  if (count($events) != 0) {
    foreach ($events as $event) {
      $nid = module_invoke_all('os_get_nid_by_eventid', $event->eventid);
      $nid = $nid[0];
      $node = node_load($nid);
      $node->url = l($node->title, 'node/'. $node->nid);
      $format = variable_get('date_format_long', 'l, j F, Y - H:i');
      $node->start_date = d4os_ui_events_get_date_from_utc_timestamp($node->dateUTC, $format);
      $node->duration_string = d4os_ui_events_get_duration_string($node->duration);
      $nodes[] = $node;
    }
  }
  else {
    return t('No events available.');
  }
  return theme('d4os_ui_events_list', $nodes);
}

function d4os_ui_events_theme() {
  return array(
    'd4os_ui_events_event' => array(
      'path'      => drupal_get_path('module', 'd4os_ui_events').'/theme',
      'template'  => 'd4os_ui_events_event',
      'arguments' => array('node'),
    ),
    'd4os_ui_events_list' => array(
      'path'      => drupal_get_path('module', 'd4os_ui_events').'/theme',
      'template'  => 'd4os_ui_events_list',
      'arguments' => array('events' => array()),
    ),
  );
}

function template_preprocess_d4os_ui_events_event(&$variables) {
  // get the event
  $variables['event'] = $variables[0];
  // categories
  $categories = d4os_ui_events_get_categories();
  $category = $variables['event']->category;
  $variables['event']->category = $categories[$category];
  // mature
  $mature = $variables['event']->mature;
  $variables['event']->mature = ($mature == 'true') ? t('Yes') : t('No');
  // date
  $format = variable_get('date_format_long', 'l, j F, Y - H:i');
  $variables['event']->date = d4os_ui_events_get_date_from_utc_timestamp($variables['event']->dateUTC, $format);
  // duration
  $variables['event']->duration_string = d4os_ui_events_get_duration_string($variables['event']->duration);
}

function d4os_ui_events_build_node(&$node) {
  // location
  if (isset($node->simname) && isset($node->globalPos)) {
    $node->location = d4os_ui_events_get_selected_parcel($node->simname, $node->globalPos);
  }
  // date
  if (isset($node->dateUTC)) {
    $node->start_date = d4os_ui_events_get_date_from_utc_timestamp($node->dateUTC);
    $node->end_date   = d4os_ui_events_get_date_from_utc_timestamp(($node->dateUTC + $node->duration));
  }
}

function d4os_ui_events_build_output($node) {
  // get the user account
  $account = user_load($node->uid);

  $format = variable_get('date_format_medium', 'm/d/Y H:i');

  // Make a UNIX_TIMESTAMP of the start date/time
  $start_date = $node->start_date;
  $start_stamp = d4os_ui_events_get_utc_timestamp_from_date($start_date);
  // Make a UNIX_TIMESTAMP of the end date/time
  $end_date = $node->end_date;
  $end_stamp = d4os_ui_events_get_utc_timestamp_from_date($end_date);
  // get the duration
  $duration = $end_stamp - $start_stamp;

  // Checking if it's an event with Maturity
  $mature     = "false";
  $eventflags = 0;
  if ($node->mature) {
    $mature     = "true";
    $eventflags = 1;
  }

  // The hard part, getting the region and converting that to a GlobalPosition
  // TODO : check location
//116/138/20.05
//256000
  $position = $node->location;
  list($location, $regionUUID)  = explode("|", $position);
  list($val_x, $val_y, $val_z)     = explode("/", $location);
  $region     = module_invoke_all('os_region_load', array('uuid' => $regionUUID));
  $region     = $region[0];
  $simname    = $region->regionName;

  //$parcel_x = intval($val_x);//116
  //$parcel_y = intval($val_y);//138
  //$parcel_z = intval($val_z);//20.05
  $parcel_x    = $val_x;//116
  $parcel_y    = $val_y;//138
  $parcel_z    = $val_z;//20.05

  $region_x    = ($region->locX / 256);
  $region_y    = ($region->locY / 256);

  $global_x    = $region_x + $parcel_x;
  $global_y    = $region_y + $parcel_y;
  $global_z    = $parcel_z;

  $globalPos  = "<".$global_x.",".$global_y.",".$global_z.">";

  // build the output
  return array(
    'nid'           => $node->nid,
    'vid'           => $node->vid,
    'owneruuid'     => $account->d4os['grid']['account']['uuid'],
    'name'          => $node->title,
    'creatoruuid'   => $account->d4os['grid']['account']['uuid'],
    'category'      => $node->category,
    'description'   => $node->body,
    'dateUTC'       => $start_stamp,
    'duration'      => $duration,
    'covercharge'   => $node->covercharge,
    'coveramount'   => $node->coveramount,
    'simname'       => $simname,
    'globalPos'     => $globalPos,
    'eventflags'    => $eventflags,
    'mature'        => $mature,
    'eventid'       => $node->eventid
  );
}
