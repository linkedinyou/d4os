<?php
/**
* @package    d4os
* @copyright  Copyright (C) 2010 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
* @license    GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
* D4os is free software. This version may have been modified pursuant
* to the GNU General Public License, and as distributed it includes or
* is derivative of works licensed under the GNU General Public License or
* other free or open source software licenses.
*/

// TODO : see what we can do with http://domain.com:9000/admin/regioninfo/

function d4os_ui_grid_monitor_users_help($path, $arg) {
  switch ($path) {
    case 'admin/help#d4os_ui_grid_monitor_users':
      return '<p>' . t('OpenSim grid users management') . '</p>';
  }
}

function d4os_ui_grid_monitor_users_menu() {
  $items['grid/monitor/users/online/list'] = array(
    'title'             => 'Users',
    'description'       => 'Online users.',
    'page callback'     => 'd4os_ui_grid_monitor_users_display_users_list',
    'access arguments'  => array('view d4os ui grid monitor users list'),
    'type'              => MENU_NORMAL_ITEM,
  );
  
  $items['admin/settings/d4os/ui/grid/monitor/users'] = array(
    'title'             => 'users',
    'description'       => 'd4os ui grid monitor users settings',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('d4os_ui_grid_monitor_users_admin'),
    'access arguments'  => array('admin d4os ui grid monitor users'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'd4os_ui_grid_monitor_users.admin.inc'
   );
  return $items;
}

function d4os_ui_grid_monitor_users_perm() {
  return array(
    'view d4os ui grid monitor users list',
    'admin d4os ui grid monitor users',
  );
}

function d4os_ui_grid_monitor_users_format_list($online_users) {
  $regions_list = module_invoke_all('os_regions_names');
  $users_list = module_invoke_all('os_user_load_all');
  $uids_list = module_invoke_all('os_user_get_all_uid');

  foreach ($online_users as $online_user) {
    $online_user->agentUuid = $online_user->UUID;
    // get the uid
    foreach ($uids_list as $uid) {
      if ($online_user->UUID == $uid->UUID) {
        $online_user->agentUid = $uid->uid;
      }
    }
    // get the name
    foreach ($users_list as $user_values) {
      if ($online_user->UUID == $user_values->UUID) {
        $online_user->agentName = $user_values->name;
      }
    }
    // get the region name
    foreach ($regions_list as $region) {
      if ($online_user->currentRegion == $region->uuid) {
        $online_user->currentRegionName = $region->regionName;
      }
    }
  }
  return $online_users;
}

function d4os_ui_grid_monitor_users_display_users_list() {
  // check if the datastore is alive
  $alive = module_invoke_all('os_users_is_alive');
  if (!is_array($alive) || $alive['success'] !== TRUE) {
    drupal_set_message(t('You can not see the users list.'), 'error');
    drupal_set_message(t('Please try again later.'), 'error');
    drupal_goto();
  }

  $headers = d4os_ui_grid_monitor_users_list_build_headers();
  $online_users = module_invoke_all('os_users_online_users_list_paged', 0, 10, $headers);
  $online_users = d4os_ui_grid_monitor_users_format_list($online_users);

  $count = module_invoke_all('os_users_online_users_count');
  $count = $count[0];
  if ($count == 0) {
    drupal_set_message('There are no users currently logged in the grid.');
    return '';
  }
  $output = '<div id="online-users-count"><p>';
  $output .= t('There %users online.', array(
              '%users' => format_plural($count, 'is 1 user', 'are @count users')));
  $output .= '</p></div>';
  $output .= theme_d4os_ui_grid_monitor_users_list_table($online_users, $title = NULL, $params, $headers);
  $output .= theme('pager');
  return $output;
}

function d4os_ui_grid_monitor_users_list_build_headers() {
  $items =  variable_get('d4os_ui_grid_monitor_users_list_items', array('agentUuid', 'agentName', 'agentIP', 'loginTime', 'currentRegionName'));
  $headers = array();
  if ($items['agentUuid']) {
    $headers[] = array(
      'data'  => t('uuid'),
      'field' => 'uuid',
    );
  }
  if ($items['agentName']) {
    $headers[] = array(
      'data'  => t('Name'),
    );
  }
  if ($items['agentIP']) {
    $headers[] = array(
      'data'  => t('IP'),
      'field' => 'agentIP',
    );
  }
  if ($items['agentPort']) {
    $headers[] = array(
      'data'  => t('Port'),
      'field' => 'agentPort',
    );
  }
  if ($items['loginTime']) {
    $headers[] = array(
      'data'  => t('loginTime'),
      'field' => 'loginTime',
    );
  }
  if ($items['logoutTime']) {
    $headers[] = array(
      'data'  => t('logoutTime'),
      'field' => 'logoutTime',
    );
  }
  if ($items['currentRegion']) {
    $headers[] = array(
      'data'  => t('currentRegion'),
      'field' => 'currentRegion',
    );
  }
  if ($items['currentRegionName']) {
    $headers[] = array(
      'data'  => t('currentRegionName'),
    );
  }
  if ($items['currentHandle']) {
    $headers[] = array(
      'data'  => t('currentHandle'),
      'field' => 'currentHandle',
    );
  }
  if ($items['currentPos']) {
    $headers[] = array(
      'data'  => t('currentPos'),
      'field' => 'currentPos',
    );
  }
  if ($items['currentLookAt']) {
    $headers[] = array(
      'data'  => t('currentLookAt'),
      'field' => 'currentLookAt',
    );
  }
  return $headers;
}

function theme_d4os_ui_grid_monitor_users_list_table($online_users, $title = NULL, $params, $headers) {
  global $user;
  // get the items list to show
  $items =  variable_get('d4os_ui_grid_monitor_users_list_items', array('agentUuid', 'agentName', 'agentIP', 'loginTime', 'currentRegionName'));

  // build the table
  $rows = array();
  $params['cols'] = $params['cols'] ? $params['cols'] : 1;
  $col = 0;
  $cells = array();
  foreach ($online_users as $online_user) {
    if ($items['agentUuid']) {
      $cells[] = $online_user->agentUuid;
    }
    if ($items['agentName']) {
      $cells[] = l($online_user->agentName, 'user/'. $online_user->agentUid);
    }
    if ($items['agentIP']) {
      $cells[] = $online_user->agentIP;
    }
    if ($items['agentPort']) {
      $cells[] = $online_user->agentPort;
    }
    if ($items['loginTime']) {
      $cells[] = date(variable_get('date_format_short', 'm/d/Y H:i'), $online_user->loginTime);
    }
    if ($items['logoutTime']) {
      if ($online_user->logoutTime == 0) {
        $cells[] = t('Never logged out');
      }
      else {
        $cells[] = date(variable_get('date_format_short', 'm/d/Y H:i'), $online_user->logoutTime);
      }
    }
    if ($items['currentonline_user']) {
      $cells[] = $online_user->currentonline_user;
    }
    if ($items['currentonline_userName']) {
      $cells[] = $online_user->currentonline_userName;
    }
    if ($items['currentRegion']) {
      $cells[] = $online_user->currentRegion;
    }
    if ($items['currentRegionName']) {
      $cells[] = $online_user->currentRegionName;
    }
    if ($items['currentHandle']) {
      $cells[] = $online_user->currentHandle;
    }
    if ($items['currentPos']) {
      $cells[] = $online_user->currentPos;
    }
    if ($items['currentLookAt']) {
      $cells[] = $online_user->currentLookAt;
    }
    ++$col;
    if ($col >= $params['cols']) {
      $rows[] = $cells;
      $cells  = array();
      $col    = 0;
    }
  }
  $output = theme_table($headers, $rows);
  return $output;
}
