<?php
/**
* @package    d4os
* @copyright  Copyright (C) 2010 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
* @license    GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
* D4os is free software. This version may have been modified pursuant
* to the GNU General Public License, and as distributed it includes or
* is derivative of works licensed under the GNU General Public License or
* other free or open source software licenses.
*/

function d4os_ui_groups_menu() {
  $items['admin/settings/d4os/ui/groups'] = array(
    'title'             => 'groups',
    'description'       => 'd4os ui groups settings',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('d4os_ui_groups_admin'),
    'access arguments'  => array('admin d4os ui groups'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'd4os_ui_groups.admin.inc'
  );
  $items['grid/groups/check'] = array(
    'title'             => 'Check groups',
    'description'       => 'Check groups',
    'page callback'     => 'd4os_ui_groups_check_groups',
    'access arguments'  => array('admin d4os ui groups'),
    'type'              => MENU_NORMAL_ITEM,
  );
  return $items;
}

function d4os_ui_groups_perm() {
  return array(
    'admin d4os ui groups',
  );
}

function d4os_ui_groups_form_alter(&$form, $form_state, $form_id) {
  // TODO : manage memberships moderated requests
  // TODO : manage managers changes
  // TODO : mange ogur
  switch ($form_id) {
    // add the user to the group if requested
    case 'og_confirm_subscribe':
      array_unshift($form['#submit'], 'd4os_ui_groups_confirm_subscribe_submit');
      break;
    case 'og_confirm_unsubscribe':
      array_unshift($form['#submit'], 'd4os_ui_groups_confirm_subscribe_submit');
      break;
  }
}

function d4os_ui_groups_confirm_subscribe_submit($form, &$form_state) {
  //drupal_set_message('<pre>'.print_r($form_state, true).'</pre>', 'warning');
  // GroupID / AgentID
  // check if the user is registered inworld
  $account = $form_state['values']['account'];
  $AgentID = isset($account->grid_UUID) ? $account->grid_UUID : FALSE;
  if (!$AgentID) {
    drupal_set_message(t('This user is not registered on the grid.'), 'error');
    return;
  }
  // get the GroupID
  $grid_group = module_invoke_all('os_group_load', array('nid' => $form_state['values']['gid']));
  $GroupID = isset($grid_group['GroupID']) ? $grid_group['GroupID'] : FALSE;
  if (!$GroupID) {
    drupal_set_message(t('This group is not registered on the grid.'), 'error');
    return;
  }
  $subscribed = module_invoke_all('os_group_subscribe', array('GroupID' => $GroupID, 'AgentID' => $AgentID));
}

function d4os_ui_groups_confirm_unsubscribe_submit($form, &$form_state) {
  $group_node = $form_state['values']['group_node'];
  $account = $form_state['values']['account'];
  $nid = $group_node->nid;
  // check if the user is registered inworld
  $AgentID = isset($account->grid_UUID) ? $account->grid_UUID : FALSE;
  if (!$AgentID) {
    drupal_set_message(t('This user is not registered on the grid.'), 'error');
    return;
  }
  // get the GroupID
  $grid_group = module_invoke_all('os_group_load', array('nid' => $nid));
  $GroupID = isset($grid_group['GroupID']) ? $grid_group['GroupID'] : FALSE;
  if (!$GroupID) {
    drupal_set_message(t('This group is not registered on the grid.'), 'error');
    return;
  }
  $unsubscribed = module_invoke_all('os_group_unsubscribe', array('GroupID' => $GroupID, 'AgentID' => $AgentID));
}

function d4os_ui_groups_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($node->form_id == 'group_node_form' && $node->type == variable_get('d4os_ui_groups_type', NULL) && !$node->inworld) {
    switch ($op) {
      case 'validate':
        d4os_ui_groups_validate($node);
        break;
      case 'insert':
      case 'update':
        d4os_ui_groups_save_group($node);
        break;
      case 'delete':
        module_invoke_all('os_group_delete', array('nid' => $node->nid));
        break;
    }
  }
}

function d4os_ui_groups_validate($node) {
  // check for groupname length
  $title_length = strlen($node->title);
  if ($title_length < 4 || $title_length > 35) {
    form_set_error('title', t('The group name should be between 4 and 35 characters.'));
  }
  // check if new or update
  $isnew = ($node->nid) ? FALSE : TRUE;

  // check if the group name already exists
  $params = array(
    'Name' => $node->title,
  );
  // include the groups file
  module_load_include('services.inc', 'd4os_io_services_groups');
  // get the inworld group
  $group_by_name = d4os_io_services_groups_getGroup($params, FALSE);
  $exists = FALSE;

  if (!$isnew) {
    $group_by_nid = module_invoke_all('os_group_load', array('nid' => $node->nid));
    $exists = (!isset($group_by_name['succeed']) && $group_by_nid['GroupID'] != $group_by_name['GroupID']);
  }
  else {
    $exists = isset($group_by_name['GroupID']);
  }
  if ($exists) {
    form_set_error('title', t('This group name already exists.'));
  }
}

function d4os_ui_groups_save_group(&$node) {

  // build the params
  $params = array(
    'Name'            => addslashes($node->title),
    'Charter'         => drupal_html_to_text($node->body),
    'MembershipFee'   => 0,
    'OpenEnrollment'  => ($node->og_selective == 0) ? 1 : 0,
    'ShowInList'      => $node->og_directory,
    'AllowPublish'    => $node->og_directory, // TODO : try to find a relation
    'MaturePublish'   => 1, // TODO : try to find a relation
    'nid'             => $node->nid,
    'uid'             => $node->uid,
  );
// TODO : add inworld admin role when a new admin is set to og
  $saved = module_invoke_all('os_group_save', $params);
  if (isset($saved['action'])) {
    $action = ($saved['action'] == 'update') ? t('updated') : t('added');
    drupal_set_message(t('Group !action inworld.', array('!action' => $action)));
  }
  else {
    drupal_set_message(t('Could not save the group inworld.'), 'error');
  }
}

function d4os_ui_groups_check_groups() {
  // get drupal groups
  $website_groups = array();
  $result = db_query('SELECT n.* FROM {node} AS n LEFT JOIN {og} AS g ON n.nid = g.nid');
  while ($group = db_fetch_array($result)) {
    $website_groups[] = $group;
  }
  // get grid groups
  $grid_groups = module_invoke_all('os_group_load_all');

  // check if drupal groups are in the grid base
  $not_in_grid = array();
  foreach ($website_groups as $website_group) {
    $title = $website_group['title'];
    if (d4os_array_search_recursive($title, $grid_groups) === NULL) {
      $not_in_grid[] = $website_group;
    }
  }

  // check if grid groups are in the drupal base
  $not_in_website = array();
  foreach ($grid_groups as $grid_group) {
    $title = $grid_group['title'];
    if (d4os_array_search_recursive($title, $website_groups) === NULL) {
      $not_in_website[] = $grid_group;
    }
  }

  $output = '';
  // build the output for the website groups
  $output .= '<h2>'. t('Website groups'). '</h2>';
  if ($not_in_grid_qty = count($not_in_grid)) {
    $output .= '<div class="messages warning">'. t('There !are currently !groups not registered on the grid.', array(
              '!are' => format_plural($not_in_grid_qty, 'is', 'are'),
              '!groups' => format_plural($not_in_grid_qty, '1 group', '@count groups'))). '</div>';
    $headers = array(
      array(
        'data'  => t('Title')
      ),
      array(
        'data'  => t('Id')
      ),
    );
    $rows = array();
    $params['cols'] = $params['cols'] ? $params['cols'] : 1;
    $col = 0;
    $cells = array();
    foreach($not_in_grid as $website_group) {
      $cells[] = l($website_group['title'], 'node/'.$website_group['nid']);
      $cells[] = l($website_group['nid'], 'node/'.$website_group['nid']);
      ++$col;
      if ($col >= $params['cols']) {
        $rows[] = $cells;
        $cells  = array();
        $col    = 0;
      }
    }
    $output .= theme_table($headers, $rows);
  }
  else {
    $output .= '<div class="messages status">'. t('All groups are registered on the grid.'). '</div>';
  }

  // build the output for the grid groups
  $output .= '<h2>'. t('Grid groups'). '</h2>';
  if ($not_in_website_qty = count($not_in_website)) {
    $output .= '<div class="messages warning">'. t('There !are currently !groups not registered on the website.', array(
              '!are' => format_plural($not_in_website_qty, 'is', 'are'),
              '!groups' => format_plural($not_in_website_qty, '1 group', '@count groups'))). '</div>';
    $headers = array(
      array(
        'data'  => t('Title')
      ),
      array(
        'data'  => t('Uuid')
      ),
      array(
        'data'  => t('Action')
      ),
    );
    $rows = array();
    $params['cols'] = $params['cols'] ? $params['cols'] : 1;
    $col = 0;
    $cells = array();
    foreach($not_in_website as $grid_group) {
      $cells[] = $grid_group['title'];
      $cells[] = $grid_group['GroupID'];
      $cells[] = drupal_get_form('d4os_ui_groups_check_groups_set_group_form', $grid_group);
      
      ++$col;
      if ($col >= $params['cols']) {
        $rows[] = $cells;
        $cells  = array();
        $col    = 0;
      }
    }
    $output .= theme_table($headers, $rows);
  }
  else {
    $output .= '<div class="messages status">'. t('All groups are registered on the website.'). '</div>';
  }
  return $output;
}

function d4os_ui_groups_check_groups_set_group_form($form_state, $grid_group) {
  $form = array();
  $form['title']    = array('#type' => 'hidden', '#value' => $grid_group['title']);
  $form['GroupID']  = array('#type' => 'hidden', '#value' => $grid_group['GroupID']);
  $form['action']   = array(
    '#type' => 'select',
    '#options' => array('none' => t('None'), 'add' => t('Add'), 'del' => t('Delete'))
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );
  $form['#submit'][] = 'd4os_ui_groups_check_groups_set_group_form_submit';
  return $form;
}

function d4os_ui_groups_check_groups_set_group_form_submit($form, &$form_state) {
  $values   = $form['#post'];
  $title    = $values['title'];
  $GroupID  = $values['GroupID'];

  switch ($values['action']) {
    case 'none':
      drupal_set_message(t('Nothing changed for group !title.', array('!title' => $title)));
      break;
    case 'add':
      // include the groups file
      module_load_include('services.inc', 'd4os_io_services_groups');
      // get the inworld group
      $group = array(
        'GroupID' => $GroupID,
      );
      $grid_group = d4os_io_services_groups_getGroup($group, FALSE);
      // get the user
      $user_uuid = db_query("SELECT uid FROM {d4os_ui_users} WHERE UUID='%s'", array($grid_group['FounderID']));
      if (!$user_uuid) {
        drupal_set_message(t('Group founder is not registered on the site. The group can not be added.'), 'error');
        return;
      }
      d4os_io_db_os_group_grid_create($grid_group);
      break;
    case 'del':
      module_invoke_all('os_group_delete', $values['GroupID']);
      drupal_set_message(t('Group !title deleted on the grid.', array('!title' => $title)));
      break;
  }
}