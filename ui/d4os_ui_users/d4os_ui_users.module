<?php
/**
* @package    d4os
* @copyright  Copyright (C) 2010 Wene - ssm2017 Binder ( S.Massiaux ). All rights reserved.
* @license    GNU/GPL, http://www.gnu.org/licenses/gpl-2.0.html
* D4os is free software. This version may have been modified pursuant
* to the GNU General Public License, and as distributed it includes or
* is derivative of works licensed under the GNU General Public License or
* other free or open source software licenses.
*/

// TODO : refine users

define(USERNAME_MAX_LENGTH, 32);
define(LASTNAME_MAX_LENGTH, 32);

module_load_include('helpers.inc', 'd4os_ui_users');

function d4os_ui_users_help($path, $arg) {
  switch ($path) {
    case 'admin/help#d4os_ui_users':
      return '<p>' . t('OpenSim grid users management') . '</p>';
  }
}

function d4os_ui_users_menu() {
  $items = array();
  $items['grid/users/autocomplete'] = array(
    'title'             => 'User autocomplete',
    'page callback'     => 'd4os_ui_users_user_autocomplete',
    'access arguments'  => array('access user profiles'),
    'type'              => MENU_CALLBACK,
  );
  $items['admin/settings/d4os/ui/users'] = array(
    'title'             => 'users',
    'description'       => 'd4os ui users settings',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('d4os_ui_users_admin'),
    'access arguments'  => array('admin d4os ui users'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'd4os_ui_users.admin.inc'
  );
  $items['grid/users/check'] = array(
    'title'             => 'Check users',
    'description'       => 'Check users',
    'page callback'     => 'd4os_ui_users_check_users',
    'access arguments'  => array('admin d4os ui users'),
    'type'              => MENU_NORMAL_ITEM,
  );
  return $items;
}

function d4os_ui_users_theme() {
  return array(
    'd4os_ui_users_models_select_form' => array(
      'arguments' => array('form'),
    ),
  );
}

function d4os_ui_users_perm() {
  return array(
    'admin d4os ui users',
  );
}

function d4os_ui_users_form_alter(&$form, $form_state, $form_id) {
  switch ($form_id) {

    case 'user_login_block':
    case 'user_login':
      unset($form['name']);
      $form['username'] = array(
        '#type'         => 'textfield',
        '#title'        => t('User Name'),
        '#size'         => 15,
        '#maxlength'    => 32,
        '#weight'       => -2,
      );
      $form['lastname'] = array(
        '#type'         => 'textfield',
        '#title'        => t('Last Name'),
        '#size'         => 15,
        '#maxlength'    => 32,
        '#required'     => TRUE,
        '#weight'       => -1,
      );
      array_unshift($form['#validate'], 'd4os_ui_users_login_authenticate_validate');
      break;

    case 'user_register':
      // check if the datastore is alive
      $alive = module_invoke_all('os_users_is_alive');
      if (!is_array($alive) || $alive['success'] !== TRUE) {
        drupal_set_message(t('You can not register an account.'), 'error');
        drupal_set_message(t('Please try again later.'), 'error');
        drupal_goto();
      }
      $username_field = array(
        '#type'         => 'textfield',
        '#title'        => t('User Name'),
        '#size'         => 32,
        '#maxlength'    => 32,
        '#description'  => t('Enter the first name for the avatar. Spaces are NOT allowed;Punctuation is not allowed except for periods, hyphens, and underscores.'),
        '#weight'       => -2,
      );
      $lastname_field = array(
        '#type'         => 'textfield',
        '#title'        => t('Last Name'),
        '#size'         => 32,
        '#maxlength'    => 32,
        '#required'     => TRUE,
        '#description'  => t('Enter the last name for the avatar. Spaces are NOT allowed;punctuation is not allowed except for periods, hyphens, and underscores.'),
        '#weight'       => -1,
      );
      // workaround for this bug : http://drupal.org/node/760838
      if (isset($form['account'])) {
        unset($form['account']['name']);
        $form['account']['username'] = $username_field;
        $form['account']['lastname'] = $lastname_field;
      }
      else {
        unset($form['name']);
        $form['username'] = $username_field;
        $form['lastname'] = $lastname_field;
      }
      d4os_ui_users_avatars_models_select_form($form);
      array_unshift($form['#validate'], 'd4os_ui_users_account_validate');
      $form['#submit'] = array('d4os_ui_users_user_register_submit');
      break;

    case 'user_profile_form':
      // check if the datastore is alive
      $alive = module_invoke_all('os_users_is_alive');
      if (!is_array($alive) || $alive['success'] !== TRUE) {
        drupal_set_message(t('You can not edit an account.'), 'error');
        drupal_set_message(t('Please try again later.'), 'error');
        drupal_goto();
      }
      global $user;
      if (user_access('administer users') || user_access('change own username')) {
        $account = $form['_account']['#value'];
        $names = explode(' ', $account->name);
        if ($account->uid > 1 && $form['_category']['#value'] == 'account') {
          unset($form['account']['name']);
          $form['account']['username'] = array(
            '#type'           => 'textfield',
            '#title'          => t('User Name'),
            '#default_value'  => $names[0],
            '#size'           => 32,
            '#maxlength'      => 32,
            '#required'       => TRUE,
            '#description'    => t('Enter the first name for the avatar. Spaces are not allowed. Punctuation is not allowed except for periods, hyphens, and underscores.'),
            '#weight'         => -2,
          );
          $form['account']['lastname'] = array(
            '#type'           => 'textfield',
            '#title'          => t('Last Name'),
            '#default_value'  => $names[1],
            '#size'           => 32,
            '#maxlength'      => 32,
            '#required'       => TRUE,
            '#description'    => t('Enter the last name for the avatar. Spaces are not allowed. Punctuation is not allowed except for periods, hyphens, and underscores.'),
            '#weight'         => -1,
          );
        }
      }
      array_unshift($form['#validate'], 'd4os_ui_users_account_validate');
      break;
  }
}

function d4os_ui_users_avatars_models_select_form(&$form) {
  global $base_url;

  // get the list of models
  $available_models = array();
  for ($i=1; $i<11; ++$i) {
    $model_nbr = 'd4os_ui_users_default_model_'. $i;
    $model_uuid = variable_get($model_nbr, UUID_ZERO);
    if ($model_uuid != UUID_ZERO && $model_uuid != '') {
      $model_infos = module_invoke_all('os_user_load', array('UUID' => $model_uuid));
      $available_models[] = $model_infos[0];
    }
  }

  if (count($available_models) == 0) {
    return;
  }

  $asset_pictures_server_url = variable_get('d4os_default_asset_pictures_server_url', $base_url. '/asset.php?id=');

  // build the form fieldset
  $form['models'] = array(
    '#type'         => 'fieldset',
    '#title'        => t('Models'),
    '#collapsible'  => TRUE,
    '#collapsed'    => FALSE,
    '#theme'        => 'd4os_ui_users_models_select_form',
  );

  $options = array();
  $i = 1;
  foreach ($available_models as $model) {
    // build the form
    $form['models'][$model->UUID]['name'] = array(
      '#value' => $model->username,
    );
    $picture = theme_image(
      $asset_pictures_server_url. $model->profileImage,
      t('No picture available'),
      t("!user's first life picture", array('!user'=>$model->username)),
      NULL,
      FALSE
    );
    $form['models'][$model->UUID]['picture'] = array(
      '#value' => $picture,
    );
    $form['models'][$model->UUID]['infos'] = array(
      '#type'   => 'item',
      '#value'  => $model->profileAboutText,
    );
    $options[$model->UUID] = '';
    ++$i;
  }
  $form['models']['model_uuid'] = array(
    '#type'     => 'radios',
    '#title'    => t('Models'),
    '#options'  => $options,
  );
}

function theme_d4os_ui_users_models_select_form($form) {
  $rows = array();
  foreach (element_children($form) as $key) {
    $row = array();
    if (isset($form[$key]['picture']) && is_array($form[$key]['picture'])) {
      $row[] = drupal_render($form['model_uuid'][$key]);
      $row[] = drupal_render($form[$key]['name']);
      $row[] = drupal_render($form[$key]['picture']);
      $row[] = drupal_render($form[$key]['infos']);
    }
    $rows[] = $row;
  }

  $header = array(t('Selected'), t('Name'), t('Picture'), t('Infos'));

  $output = theme('table', $header, $rows);
  return $output;
}

function d4os_ui_users_login_authenticate_validate($form, &$form_state) {
  $admin = user_load(1);
  if ($form_state['values']['username'] == $admin->name) {
    $form_state['values']['name'] = $admin->name;
  }
  else {
    $form_state['values']['name'] = $form_state['values']['username']. ' '. $form_state['values']['lastname'];
  }
}

function d4os_ui_users_account_validate($form, &$form_state) {
  // check for the model
  if (isset($form_state['values']['model_uuid']) && $form_state['values']['model_uuid'] == '') {
    form_set_error('model', t('Please select a model.'));
  }

  // get username and lastname
  if (isset($form_state['values']['_account']->name)) {
    $names = explode(' ', $form_state['values']['_account']->name);
  }
  $username = isset($form_state['values']['username']) ? $form_state['values']['username'] : $names[0];
  $lastname = isset($form_state['values']['lastname']) ? $form_state['values']['lastname'] : $names[1];
  $name     = $username. ' '. $lastname;

  // check if the lastname is the same one as admin account
  $admin = user_load(1);
  if ($lastname == $admin->name) {
    form_set_error('lastname', t('Please use another lastname.'));
  }

  // rebuild the "name" for drupal account
  $form_state['values']['name'] = $name;

  // check the username
  $username_validate = d4os_ui_users_validate_name($username, 'username', t('username'));
  if ($username_validate) {
    form_set_error('username', $username_validate);
  }
  // check the lastname
  $lastname_validate = d4os_ui_users_validate_name($lastname, 'lastname', t('lastname'));
  if ($lastname_validate) {
    form_set_error('lastname', $lastname_validate);
  }
  // check the password length
  if (isset($form_state['values']['pass']) && !empty($form_state['values']['pass']) && strlen($form_state['values']['pass']) < 6) {
    form_set_error('pass', t('The Password field must be at least 6 characters in length.'));
  }
  // check the email address to fit new opensim rules
  if (!d4os_ui_users_validate_email($form_state['values']['mail'])) {
    form_set_error('pass', t('The Email field must contain a valid email address.'));
  }

  // get the inworld user
  $grid_user = module_invoke_all('os_user_load', array('username' => $username, 'lastname' => $lastname));
  $grid_user = $grid_user[0];

  switch ($form_state['values']['form_id']){
    case 'user_register':
      // check if user already exists when registering
      if (is_object($grid_user)) {
        form_set_error('username', t('This name already exists'));
        return;
      }
      break;
    case 'user_profile_form':
      // check if the user already exists after changing username
      if (is_object($user_exists) && $grid_user->UUID != $form_state['values']['_account']->d4os['grid']['account']['uuid']) {
        form_set_error('name', t('This name already exists'));
        return;
      }
      break;
  }
}

function d4os_ui_users_user($op, &$edit, &$account, $category = NULL) {
  switch ($op) {
    case 'insert':
      module_invoke_all('os_user_save', $edit);
      break;

    case 'load':
      // check if the datastore is alive
      $alive = module_invoke_all('os_users_is_alive');
      if (is_array($alive) && $alive['success'] === TRUE) {
        d4os_ui_users_user_load($account);
      }
      break;

    case 'update':
      if ($account->uid > 1) {
        d4os_ui_users_update($edit, $account);
      }
      break;

    case 'delete':
      module_invoke_all('os_user_delete', $account->d4os['grid']['account']['uuid']);
      break;

    case 'login':
      // TODO : build a module that is sending an email to the user to validate email account and then trigger a rule
      // check the email address
      $email = d4os_ui_users_generate_mail($account->d4os['grid']['account']['uuid']);
      if ($email == $account->mail) {
        drupal_set_message(l(t('Please update your email address.'), 'user/'. $account->uid. '/edit'), 'error');
      }
      break;
  }
}

function d4os_ui_users_user_load(&$account) {
  if ($account->uid < 2) return;

  d4os_ui_users_clean_account(&$account);

  $data = (isset($account->d4os['grid']['account']['uuid']) && $account->d4os['grid']['account']['uuid'] != NULL) ? array('UUID' => $account->d4os['grid']['account']['uuid']) : $account->uid;

  // get the grid user
  $grid_account = module_invoke_all('os_user_load', $data);
  $grid_account = $grid_account[0];

  if (is_object($grid_account)) {
    $grid_account = d4os_ui_users_grid_to_account((array)$grid_account);
    $grid_info = isset($account->d4os) ? $account->d4os : array();
    // merge the values
    $account->d4os = array_merge($grid_info, $grid_account);
  }
}

function d4os_ui_users_update(&$edit, &$account) {

  // manage username, lastname and UUID
  $edit['d4os']['grid']['account']['username'] = empty($edit['d4os']['grid']['account']['username']) ? $account->d4os['grid']['account']['username'] : $edit['d4os']['grid']['account']['username'];
  $edit['d4os']['grid']['account']['lastname'] = empty($edit['d4os']['grid']['account']['lastname']) ? $account->d4os['grid']['account']['lastname'] : $edit['d4os']['grid']['account']['lastname'];
  $edit['d4os']['grid']['account']['uuid']     = empty($edit['d4os']['grid']['account']['uuid']) ? $account->d4os['grid']['account']['uuid'] : $edit['d4os']['grid']['account']['uuid'];

  // check if the user has an account on the grid and if not create one
  $user_exists = module_invoke_all('os_user_load', array('UUID' => $edit['d4os']['grid']['account']['uuid']));

  if (!is_object($user_exists[0])) {
    unset($edit['d4os']['grid']['account']['uuid']);
    $edit = array_merge($edit, d4os_ui_users_user_generate($edit['d4os']['grid']['account']['username'],$edit['d4os']['grid']['account']['lastname'],$edit['pass'], $edit['mail']));
    module_invoke_all('os_user_save', $edit);
    drupal_set_message(t('User added to the grid.'));
    // TODO : change user password and send an email
    return;
  }
  else {
    // check if password has changed
    $edit['d4os']['grid']['auth']['password_salt'] = $account->d4os['grid']['auth']['password_salt'];
    $edit['d4os']['grid']['auth']['password_hash'] = $account->d4os['grid']['auth']['password_hash'];

    if (!empty($edit['pass']) && md5($edit['pass']) != $account->pass) {
      $edit['d4os']['grid']['auth']['password_salt'] = md5(microtime() . mt_rand(0,0xffff));
      $edit['d4os']['grid']['auth']['password_hash'] = md5(md5($edit['pass']) . ":" . $edit['d4os']['grid']['auth']['password_salt']);
    }

    // block user ?
    $edit['d4os']['grid']['account']['login_level'] = $account->d4os['grid']['account']['login_level'];
    $edit['d4os']['grid']['account']['login_level'] = d4os_ui_users_get_god_level($edit['roles']);

    //if ($edit['status'] == 0) {
    //  $edit['d4os']['grid']['account']['login_level'] = 0;
    //}

    $edit['d4os']['grid']['account']['email'] = empty($edit['mail']) ? $account->d4os['grid']['account']['email'] : $edit['mail'];
    // TODO : why home region ?
    $edit['d4os']['grid']['presence']['home_region'] = empty($edit['d4os']['grid']['presence']['home_region']) ? $account->d4os['grid']['presence']['home_region'] : $edit['d4os']['grid']['presence']['home_region'];
    $edit['d4os']['grid']['account']['uuid'] = $account->d4os['grid']['account']['uuid'];

    module_invoke_all('os_user_save', $edit);
  }
}

function d4os_ui_users_check_users() {
  // get the admin account
  $admin = user_load(1);

  // get drupal users
  $website_users = array();
  $result = db_query('SELECT * FROM {users}');

  while ($user = db_fetch_object($result)) {
    $website_users[] = $user;
  }

  // get grid users
  $grid_users = module_invoke_all('os_user_load_all');

  // check if drupal users are in the grid base
  $not_in_grid = array();
  foreach ($website_users as $website_user) {
    $name = $website_user->name;
    // check if the user has the same lastname as admin account
    $names = explode(' ', $website_user->name);
    if ($names[1] == $admin->name) {
      drupal_set_message(t('The website user called !name has the same lastname as admin account.', array('!name' => $name)), 'error');
    }
    // check if the name exists in website
    if ($website_user->uid > 1 && d4os_array_search_recursive($name, $grid_users) === NULL) {
      $not_in_grid[] = $website_user;
    }
  }

  // check if grid users are in the drupal base
  $not_in_website = array();
  foreach ($grid_users as $grid_user) {
    $name = $grid_user->name;
    // check if the user has the same lastname as admin account
    if ($grid_user->lastname == $admin->name) {
      drupal_set_message(t('The grid user called !name has the same lastname as admin account.', array('!name' => $grid_user->name)), 'error');
    }
    // check if the name exists in website
    if (d4os_array_search_recursive($name, $website_users) === NULL) {
      $not_in_website[] = $grid_user;
    }
  }

  $output = '';
  // build the output for the website users
  $output .= '<h2>'. t('Website users'). '</h2>';
  if ($not_in_grid_qty = count($not_in_grid)) {
    $output .= '<div class="messages warning">'. t('There !are currently !members not registered on the grid.', array(
              '!are' => format_plural($not_in_grid_qty, 'is', 'are'),
              '!members' => format_plural($not_in_grid_qty, '1 user', '@count users'))). '</div>';
    $headers = array(
      array(
        'data'  => t('Name')
      ),
      array(
        'data'  => t('Id')
      ),
    );

    $rows = array();
    $params['cols'] = $params['cols'] ? $params['cols'] : 1;
    $col = 0;
    $cells = array();

    foreach($not_in_grid as $website_user) {
      $cells[] = l($website_user->name, 'user/'.$website_user->uid);
      $cells[] = l($website_user->uid, 'user/'.$website_user->uid);
      ++$col;
      if ($col >= $params['cols']) {
        $rows[] = $cells;
        $cells  = array();
        $col    = 0;
      }
    }
    $output .= theme_table($headers, $rows);
  }
  else {
    $output .= '<div class="messages status">'. t('All users are registered on the grid.'). '</div>';
  }

  // build the output for the grid users
  $output .= '<h2>'. t('Grid users'). '</h2>';
  if ($not_in_website_qty = count($not_in_website)) {
    $output .= '<div class="messages warning">'. t('There !are currently !members not registered on the website.', array(
              '!are' => format_plural($not_in_website_qty, 'is', 'are'),
              '!members' => format_plural($not_in_website_qty, '1 user', '@count users'))). '</div>';

    $headers = array(
      array(
        'data'  => t('Name')
      ),
      array(
        'data'  => t('Uuid')
      ),
      array(
        'data'  => t('Email')
      ),
      array(
        'data'  => t('Action')
      ),
    );

    $rows = array();
    $params['cols'] = $params['cols'] ? $params['cols'] : 1;
    $col = 0;
    $cells = array();

    foreach($not_in_website as $grid_user) {
      $cells[] = $grid_user->username. ' '. $grid_user->lastname;
      $cells[] = $grid_user->UUID;
      $cells[] = $grid_user->email;
      $cells[] = drupal_get_form('d4os_ui_users_check_users_set_user_form', $grid_user);

      ++$col;
      if ($col >= $params['cols']) {
        $rows[] = $cells;
        $cells  = array();
        $col    = 0;
      }
    }
    $output .= theme_table($headers, $rows);
  }
  else {
    $output .= '<div class="messages status">'. t('All users are registered on the website.'). '</div>';
  }
  return $output;
}

function d4os_ui_users_check_users_set_user_form($form_state, $account) {

  $form = array();
  $form['username'] = array('#type' => 'hidden', '#value' => $account->username);
  $form['lastname'] = array('#type' => 'hidden', '#value' => $account->lastname);
  $form['mail']     = array('#type' => 'hidden', '#value' => $account->email);
  $form['status']   = array('#type' => 'hidden', '#value' => 1);
  $form['UUID']     = array('#type' => 'hidden', '#value' => $account->UUID);
  $form['action']   = array(
    '#type' => 'select',
    '#options' => array('none' => t('None'), 'add' => t('Add'), 'del' => t('Delete'))
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Go'),
  );

  $form['#submit'][] = 'd4os_ui_users_check_users_set_user_form_submit';
  return $form;
}

function d4os_ui_users_check_users_set_user_form_submit($form, &$form_state) {
  // TODO : use $form_state instead using form theming like for user models
  $values = $form['#post'];
  $values['name'] = $values['username']. ' '. $values['lastname'];

  switch ($values['action']) {
    case 'none':
      drupal_set_message(t('Nothing changed for user !name.', array('!name' => $values['name'])));
      break;

    case 'add':
      d4os_ui_users_check_users_add_user($values);
      break;

    case 'del':
      module_invoke_all('os_user_delete', $values['UUID']);
      drupal_set_message(t('User !name deleted on the grid.', array('!name' => $values['name'])));
      break;
  }
}

function d4os_ui_users_check_users_add_user($values) {
  $data = array();
  // check username
  if ($msg = user_validate_name($values['name'])) {
    drupal_set_message($msg, 'error');
    return;
  }
  // check email
  if ($msg = user_validate_mail($values['mail'])) {
    drupal_set_message($msg, 'error');
    drupal_set_message(t('A new email address was generated. The user will need to update it.'), 'error');
    $values['mail'] = d4os_ui_users_generate_mail($values['UUID']);
    drupal_set_message($values['mail'], 'error');
    $assigned_role = variable_get('d4os_ui_users_default_missing_email_role',0);
    if ($assigned_role != 0) {
      $data['roles'] = array($assigned_role => 'role');
    }
  }
  // save user
  $data['name']                         = $values['name'];
  $data['mail']                         = $values['mail'];
  $data['status']                       = $values['status'];
  $data['pass']                         = user_password();
  $data['grid']['account']['uuid']      = $values['UUID'];
  $data['grid']['account']['username']  = $values['username'];
  $data['grid']['account']['lastname']  = $values['lastname'];

  $account = user_save(NULL, $data);
  drupal_set_message(t('User !name added on the website.', array('!name' => $values['name'])));
}

function d4os_ui_users_user_register_submit($form, &$form_state) {
  global $base_url;
  $admin = user_access('administer users');

  $mail = $form_state['values']['mail'];
  $name = $form_state['values']['name'];
  if (!variable_get('user_email_verification', TRUE) || $admin) {
    $pass = $form_state['values']['pass'];
  }
  else {
    $pass = user_password();
  };
  $notify = isset($form_state['values']['notify']) ? $form_state['values']['notify'] : NULL;
  $from = variable_get('site_mail', ini_get('sendmail_from'));
  if (isset($form_state['values']['roles'])) {
    // Remove unset roles.
    $roles = array_filter($form_state['values']['roles']);
  }
  else {
    $roles = array();
  }

  if (!$admin && array_intersect(array_keys($form_state['values']), array('uid', 'roles', 'init', 'session', 'status'))) {
    watchdog('security', 'Detected malicious attempt to alter protected user fields.', array(), WATCHDOG_WARNING);
    $form_state['redirect'] = 'user/register';
    return;
  }
  // The unset below is needed to prevent these form values from being saved as
  // user data.
  unset(
    $form_state['values']['form_token'],
    $form_state['values']['submit'],
    $form_state['values']['op'],
    $form_state['values']['notify'],
    $form_state['values']['form_id'],
    $form_state['values']['affiliates'],
    $form_state['values']['destination']
  );

  $merge_data = array('pass' => $pass, 'init' => $mail, 'roles' => $roles);
  if (!$admin) {
    // Set the user's status because it was not displayed in the form.
    $merge_data['status'] = variable_get('user_register', 1) == 1;
  }

  // generate the grid user
  $username = $form_state['values']['username'];
  $lastname = $form_state['values']['lastname'];
  $merge_data['d4os'] = d4os_ui_users_user_generate($username, $lastname, $pass, $mail);

  // save the account
  $account = user_save('', array_merge($form_state['values'], $merge_data));

  // Terminate if an error occured during user_save().
  if (!$account) {
    drupal_set_message(t("Error saving user account."), 'error');
    $form_state['redirect'] = '';
    return;
  }

  // create inventory using a model
  if (isset($form_state['values']['model_uuid']) && $form_state['values']['model_uuid'] != UUID_ZERO) {
    $params = array(
      'avatar_src_uuid'   => $form_state['values']['model_uuid'],
      'avatar_dest_uuid'  => $account->d4os['grid']['account']['uuid'],
    );
    module_invoke_all('os_inventory_clone_model', $params);
  }

  $form_state['user'] = $account;
  watchdog('user', 'New user: %name (%email).', array('%name' => $name, '%email' => $mail), WATCHDOG_NOTICE, l(t('edit'), 'user/'. $account->uid .'/edit'));

  // The first user may login immediately, and receives a customized welcome e-mail.
  if ($account->uid == 1) {
    drupal_set_message(t('Welcome to Drupal. You are now logged in as user #1, which gives you full control over your website.'));
    if (variable_get('user_email_verification', TRUE)) {
      drupal_set_message(t('</p><p> Your password is <strong>%pass</strong>. You may change your password below.</p>', array('%pass' => $pass)));
    }

    user_authenticate(array_merge($form_state['values'], $merge_data));

    $form_state['redirect'] = 'user/1/edit';
    return;
  }
  else {
    // Add plain text password into user account to generate mail tokens.
    $account->password = $pass;
    if ($admin && !$notify) {
      drupal_set_message(t('Created a new user account for <a href="@url">%name</a>. No e-mail has been sent.', array('@url' => url("user/$account->uid"), '%name' => $account->name)));
    }
    else if (!variable_get('user_email_verification', TRUE) && $account->status && !$admin) {
      // No e-mail verification is required, create new user account, and login
      // user immediately.
      _user_mail_notify('register_no_approval_required', $account);
      if (user_authenticate(array_merge($form_state['values'], $merge_data))) {
        drupal_set_message(t('Registration successful. You are now logged in.'));
      }
      $form_state['redirect'] = '';
      return;
    }
    else if ($account->status || $notify) {
      // Create new user account, no administrator approval required.
      $op = $notify ? 'register_admin_created' : 'register_no_approval_required';
      _user_mail_notify($op, $account);
      if ($notify) {
        drupal_set_message(t('Password and further instructions have been e-mailed to the new user <a href="@url">%name</a>.', array('@url' => url("user/$account->uid"), '%name' => $account->name)));
      }
      else {
        drupal_set_message(t('Your password and further instructions have been sent to your e-mail address.'));
        $form_state['redirect'] = '';
        return;
      }
    }
    else {
      // Create new user account, administrator approval required.
      _user_mail_notify('register_pending_approval', $account);
      drupal_set_message(t('Thank you for applying for an account. Your account is currently pending approval by the site administrator.<br />In the meantime, a welcome message with further instructions has been sent to your e-mail address.'));
      $form_state['redirect'] = '';
      return;

    }
  }
}

function d4os_ui_users_user_autocomplete($string = '') {
  $matches = array();
  if ($string) {
    $result = db_query_range("SELECT name FROM {users} WHERE LOWER(name) LIKE LOWER('%s%%')", $string, 0, 10);
    while ($user = db_fetch_object($result)) {
      $matches[$user->name] = check_plain($user->name);
    }
  }

  drupal_json($matches);
}